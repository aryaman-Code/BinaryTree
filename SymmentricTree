 public boolean isSymmetric(TreeNode root) {
        return root==null || isSymmetricHelp(root.left, root.right);
    }

    private boolean isSymmetricHelp(TreeNode left, TreeNode right){
        if(left==null || right==null)
            return left==right;
        if(left.val!=right.val)
            return false;
        return isSymmetricHelp(left.left, right.right) && isSymmetricHelp(left.right, right.left);
    }
    
    TC-O(n)
    SC-O(Height)orO(n)// assuming stack
  
  
  public static boolean isSymmetric(Node root)
    {
        // add your code here;
        if(root==null)
        return true;
        Node t1=root.left;
        Node t2=root.right;
        return solve(t1,t2);
    }
    static boolean solve(Node t1,Node t2)
    {
 /*       if(t1==null&&t2==null)
        return true;*/
        if(t1==null||t2==null)
        return t1==t2;
        if(t1.data!=t2.data)
        return false;
        if(!solve(t1.left,t2.right))
          return false;
        if(!solve(t1.right,t2.left))
          return false;
        return true;
    }
}
    
