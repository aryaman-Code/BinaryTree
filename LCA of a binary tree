	Node lca(Node root, int p,int q)
	{
		// Your code here
	 if (root == null || root.data == p || root.data == q) {
            return root;
        }
        Node left= lca(root.left, p, q);
        Node right = lca(root.right, p, q);

        //result
        if(left == null) {
            return right;
        }
        else if(right == null) {
            return left;
        }
        else { //both left and right are not null, we found our result
            return root;
        }
	}
  
  
   Node lca(Node root, int n1,int n2)
    {
        // Your code here
      if(root==null)
          return null;
      if(root.data==n1||root.data==n2)
          return root;
      Node left=null;Node right=null;
      if(root.left!=null)
             left=lca(root.left,n1,n2);
      if(root.right!=null)
      {
              right=lca(root.right,n1,n2);
      }
      if(left!=null&&right!=null)
          return root;
          else if(left!=null)
              return left;
          else // right is not equal to null
                  return right;
    }
    
    TC--O(n)
    SC__-O(n) // auxiliary space complexity
